import asyncio
import discord
import os

from datetime import datetime
from sqlalchemy import func
from discord.ext import tasks
from itertools import cycle
from models.db_gino import User
from moduls import random_gif

apikey = os.environ["TENSOR_API_KEY"]
delay = int(os.environ["DELAY"])

CHANNELS = {
    "books": 825411232159760405,
    "„Å•ÔΩ°‚óï‚Äø‚Äø‚óïÔΩ°„Å•": 774365764190732309,
    "devüõ†": 811505442252521492,
}


@tasks.loop(hours=5.0)
async def change_status(self):
    status = cycle(self.statuses)
    while not self.is_closed():
        await self.change_presence(activity=discord.Game(next(status)))


@tasks.loop(hours=5.0)
async def bdays_check(self):

    if 10 <= datetime.utcnow().hour <= 20:
        current_date = datetime.utcnow()
        party_duds = await User.query.where(
            (func.date_part("month", User.birth_date) == current_date.month) &
            (func.date_part("day", User.birth_date) == current_date.day)
        ).gino.all()

        if party_duds:
            for dude in party_duds:
                user = self.get_user(dude)
                channel = self.get_channel(CHANNELS.get("„Å•ÔΩ°‚óï‚Äø‚Äø‚óïÔΩ°„Å•"))

                embed = discord.Embed()
                url = random_gif(apikey, "birth day")
                embed.set_image(url=url)

                async with channel.typing():
                    await asyncio.sleep(0.10)

                await channel.send(f"{user.mention} happy BD, **{user.name}**! We Love you!", embed=embed)


@tasks.loop(hours=6)
async def deadline_check(self, redis_client, keyword: str = "book_club_notify_timestamp"):
    """
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ —Å–∫–æ—Ä–æ–º —Å—Ä–æ–∫–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∫–Ω–∏–≥.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–¥–∏—Å –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –û—á–µ–≤–∏–¥–Ω–æ –º–æ–∂–Ω–æ –∏ –±–µ–∑ —Ä–µ–¥–∏—Å–∞ –∏ –≤ –±–∞–∑–µ —Ö—Ä–∞–Ω–∏—Ç—å –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏,
    –Ω–æ —è —Ö–æ—Ç–µ–ª –µ–≥–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –¥–ª—è –Ω–∞—É—á–Ω—ã—Ö —Ü–µ–ª–µ–π.
    """
    channel = self.get_channel(CHANNELS.get("books"))
    utc_now = datetime.utcnow()
    timestamp = redis_client.get(keyword)
    # todo –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏.
    if 8 <= utc_now.hour <= 15:
        if timestamp is None or datetime.fromtimestamp(int(timestamp)).date() != utc_now.date():
            days = await self.pg_con.fetchval("select deadline - current_date from book_club_deadline")
            if days and days < 0:
                await self.pg_con.execute("truncate table book_club_deadline")
            elif days and days <= 7:
                redis_client.set(keyword, int(utc_now.timestamp()))
                await channel.send(f"–î–Ω–µ–π –¥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è: {days}")
